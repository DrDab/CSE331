## CSE 331 hw-graph Coding Questions

## Part 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.

I included the operations I did to satisfy the operations needed to populate a graph from an empty graph and
traverse the populated graph from any given node in the graph.

To populate the graph from an empty graph, the addNode and addEdge methods are needed to add nodes and edges
to the graph.

To traverse the graph a node to start from is needed, which could be selected from the getNodes method,
which lists all the nodes in the Graph. Then for the current node, the getChildNodes method could be used to
select the next node to visit. If I want to select paths based on label (for example based on distance), I could use
the getEdges(n1, n2) method to get a list of labels of edges between n1 and n2.


## Part 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?

My testing strategy for this assignment is to test incremental additions of complexity for the cases of adding
nodes and edges to the graph (script and JUnit tests), as well as testing the exceptions thrown

When testing the addition of nodes to the graph, I tested cases of 1, 2 and 3 nodes added
to graphs w/ 0,1,2 existing nodes and ensured the graph remembers the nodes entered into the graph.
When testing the addition of edges to the graph, I tested cases of 1, 2, and 3 edges added to the graph
(with 1,2,3 nodes). I also tested what happens when edges are added to empty graphs (should throw exceptions) and
what happens when duplicate nodes are added to graphs with 1 and 2 nodes and when duplicate edges are added to graphs
with 1, 2, and 3 nodes.

My script tests only include the cases of adding nodes and edges to the graph because the commands accepted by the
script test format only accept adding nodes and edges and listing nodes and edges. My JUnit tests include both the
contents of my script tests along with testing the exception throwing when adding duplicate edges between nodes
with the same label and adding edges to nonexistent nodes/empty graphs, because direct access to the Graph class
and JUnit lets me test exception throwing by catching it and passing the test.
