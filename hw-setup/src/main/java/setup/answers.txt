## CSE 331 hw-setup Questions
## Part 7: Answering Questions About the Code

1. Why did Fibonacci fail the testThrowsIllegalArgumentException< test? What (if anything) did
you have to do to fix it? If you did not have to change anything to fix this issue, explain why.

Fibonacci failed the testThrowsIllegalArgumentException test because the Fibonacci.getFibTerm
method was erroneously programmed to throw IllegalArgumentException for an integer n <= 0, even though
the method was only supposed to throw the exception for an integer n < 0 (because n = 0 should be a valid
case, but wasn't accepted by Fibonacci.getFibTerm). I fixed this issue by modifying line 32 of Fibonacci.java
to only throw IllegalArgumentException if n < 0 instead of if n <= 0.

2. Why did Fibonacci fail the testBaseCase test? What (if anything) did you have to do to fix
it? If you did not have to change anything to fix this issue, explain why.

Fibonacci failed the testBaseCase test (before I changed line 32 of Fibonacci.java to only throw
IllegalArgumentException if n < 0 instead of if n <= 0) because the Fibonacci.getFibTerm method
threw an IllegalArgumentException when it wasn't supposed to, since n = 0 is a valid base case while
Fibonacci.getFibTerm when run with n = 0 threw an exception claiming that n was negative in that case.
After I modified line 32 of Fibonacci.java to only throw IllegalArgumentException if n < 0 instead of
if n <= 0 (as in question 1), Fibonacci passed the testBaseCase test.

3.Why did Fibonacci fail the testInductiveCase test? What (if anything) did you have to do to
fix it? If you did not have to change anything to fix this issue, explain why.

Fibonacci failed the testInductiveCase test because line 34 in Fibonacci.getFibTerm, which checks whether
to return a base case, was checking if n <= 2 rather than if n < 2. Line 34 should be checking whether n < 2
because the indexing of terms in the Fibonacci sequence used by Fibonacci.getFibTerm starts at n = 0, not n = 1.
After I changed line 34 to check if n < 2 rather than if n <= 2, Fibonacci passed the testInductiveCase check.

Fibonacci

## Part 8: Debugger Tutorial

1. What are the values of "x", "y", and "sum" printed by your statement? Why was x not equal 
to the first integer entered here, and how could we fix this?

When I entered my first and second numbers as 5 and 2 respectively, my statement printed the values
x = 4, y = 2, and sum = 2. x was not equal to the first integer entered here because x is set to
2 * (console.nextInt() / 2) and Java's integer division ignores any remainder from the division,
keeping only the integer quotient. Hence, when I entered 5 as my first number, 2 * (5 / 2) = 2 * (2) = 4,
so x = 4. We could fix this by setting x to console.nextInt() instead of 2 * (console.nextInt() / 2).

2. What are all the names and values listed in the “Variables” panel? What does the “frames” 
tab list as the current method and line number? (Write down the text that was highlighted when 
the Debug perspective first opened.)

When Adder.main is run with my first and second numbers as 5 and 2 respectively, after making the changes
described in question 1, the names and values listed in the "Variables" panel for the computeSum:43 frame
are as follows: x = 5, y = 2. The "frames" tab lists the current (topmost) method and line number as
"computeSum:43".

3. What are all the names and values listed in the “Variables” panel after each of the two step overs?

After the first step over, the values listed in the "Variables" panel are x = 5 and y = 2.
After the second step over, the values listed in the "Variables" panel are x = 5, y = 2, and sum = 3.

